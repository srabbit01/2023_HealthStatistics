rdata = rdata[,-c(1:2)]
rdata = rbind(SSP126 = colMeans(rdata[1:250,]),
SSP245 = colMeans(rdata[251:500,]),
SSP585 = colMeans(rdata[501:750,]))
rdata
rdata = matrix(rdata, 180, 1)
rdata
rdata = read.csv('C:/Users/Ryan Song/OneDrive/문서/카카오톡 받은 파일/death_future.csv')
rdata = rdata[,-c(1:2)]
rdata = rbind(SSP126 = colMeans(rdata[1:250,]),
SSP245 = colMeans(rdata[251:500,]),
SSP585 = colMeans(rdata[501:750,]))
rdata
rdata = matrix(rdata, 180, 1)
rdata = cbind(period = rep(c(2040, 2060, 2100), each = 60),
ssp = rep(c('SSP126', 'SSP245', 'SSP585'), 60),
death = rdata)
rdata
rdata = read.csv('C:/Users/Ryan Song/OneDrive/문서/카카오톡 받은 파일/death_future.csv')
rdata = rdata[,-c(1:2)]
rdata = rbind(SSP126 = colMeans(rdata[1:250,]),
SSP245 = colMeans(rdata[251:500,]),
SSP585 = colMeans(rdata[501:750,]))
rdata = matrix(rdata, 180, 1)
rdata = data.frame(period = rep(c(2040, 2060, 2100), each = 60),
ssp = rep(c('SSP126', 'SSP245', 'SSP585'), 60),
death = rdata)
rdata
library(ggplot2)
ggplot(data = data, aes(x = period, y = death, fill = ssp)) +
geom_boxplot()
rdata$period = factor(rdata$period)
library(ggplot2)
ggplot(data = data, aes(x = period, y = death, fill = ssp)) +
geom_boxplot()
ggplot(data = rdata, aes(x = period, y = death, fill = ssp)) +
geom_boxplot()
ggplot(data = rdata, aes(x = period, y = death, fill = ssp)) +
geom_boxplot() +
scale_fill_manual(values = c('dodgerblue', 'goldenrod', 'coral'))
summary(subset(rdata, period == 2100 & ssp == 'SSP585'))
summary(subset(rdata, period == 2100 & ssp == 'SSP126'))
ggplot(data = rdata, aes(x = period, y = death, fill = ssp)) +
geom_boxplot() +
scale_fill_manual(values = c('dodgerblue', 'goldenrod', 'coral')) +
labs(title = '시군구별 연평균 총 사망',
x = '기간', y = '사망자 수(명)')
ggplot(data = rdata, aes(x = period, y = death, fill = ssp)) +
geom_boxplot() +
scale_fill_manual(values = c('dodgerblue', 'goldenrod', 'coral')) +
labs(title = '시군구별 연평균 총 사망',
x = '기간', y = '사망자 수(명)') +
theme(plot.title = element_text(h_just = 0.5))
ggplot(data = rdata, aes(x = period, y = death, fill = ssp)) +
geom_boxplot() +
scale_fill_manual(values = c('dodgerblue', 'goldenrod', 'coral')) +
labs(title = '시군구별 연평균 총 사망',
x = '기간', y = '사망자 수(명)') +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = rdata, aes(x = period, y = death, fill = ssp)) +
geom_boxplot() +
scale_fill_manual(values = c('dodgerblue', 'goldenrod', 'coral')) +
labs(title = '시군구별 연평균 총 사망',
x = '기간', y = '사망자 수(명)') +
theme(plot.title = element_text(hjust = 0.5, size = 3))
ggplot(data = rdata, aes(x = period, y = death, fill = ssp)) +
geom_boxplot() +
scale_fill_manual(values = c('dodgerblue', 'goldenrod', 'coral')) +
labs(title = '시군구별 연평균 총 사망',
x = '기간', y = '사망자 수(명)') +
theme(plot.title = element_text(hjust = 0.5, size = 20))
ggplot(data = rdata, aes(x = period, y = death, fill = ssp)) +
geom_boxplot() +
scale_fill_manual(values = c('dodgerblue', 'goldenrod', 'coral')) +
labs(title = '시군구별 연평균 총 사망',
x = '기간', y = '사망자 수(명)') +
theme(plot.title = element_text(hjust = 0.5, size = 20),
axis.title = element_text(size = 15))
ggplot(data = rdata, aes(x = period, y = death, fill = ssp)) +
geom_boxplot() +
scale_fill_manual(values = c('dodgerblue', 'goldenrod', 'coral')) +
labs(title = '시군구별 연평균 총 사망',
x = '기간', y = '사망자 수(명)', legend = '시나리오') +
theme(plot.title = element_text(hjust = 0.5, size = 20),
axis.title = element_text(size = 15),
)
ggplot(data = rdata, aes(x = period, y = death, fill = ssp)) +
geom_boxplot() +
scale_fill_manual(values = c('dodgerblue', 'goldenrod', 'coral')) +
labs(title = '시군구별 연평균 총 사망',
x = '기간', y = '사망자 수(명)') +
theme(plot.title = element_text(hjust = 0.5, size = 20),
axis.title = element_text(size = 15),
legend.title = element_text(size = 15)
)
ggplot(data = rdata, aes(x = period, y = death, fill = ssp)) +
geom_boxplot() +
scale_fill_manual(values = c('dodgerblue', 'goldenrod', 'coral')) +
labs(title = '시군구별 연평균 총 사망',
x = '기간', y = '사망자 수(명)', fill = '시나리오') +
theme(plot.title = element_text(hjust = 0.5, size = 20),
axis.title = element_text(size = 15),
legend.title = element_text(size = 15)
)
ggplot(data = rdata, aes(x = period, y = death, fill = ssp)) +
geom_boxplot() +
scale_fill_manual(values = c('dodgerblue', 'goldenrod', 'coral')) +
labs(title = '시군구별 연평균 총 사망',
x = '기간', y = '사망자 수(명)', fill = '시나리오') +
theme(plot.title = element_text(hjust = 0.5, size = 20),
axis.title = element_text(size = 15),
legend.title = element_text(size = 15),
legend.key.size = 15
)
ggplot(data = rdata, aes(x = period, y = death, fill = ssp)) +
geom_boxplot() +
scale_fill_manual(values = c('dodgerblue', 'goldenrod', 'coral')) +
labs(title = '시군구별 연평균 총 사망',
x = '기간', y = '사망자 수(명)', fill = '시나리오') +
theme(plot.title = element_text(hjust = 0.5, size = 20),
axis.title = element_text(size = 15),
legend.title = element_text(size = 15),
legend.text = element_text(size = 15)
)
ggplot(data = rdata, aes(x = period, y = death, fill = ssp)) +
geom_boxplot() +
scale_fill_manual(values = c('dodgerblue', 'goldenrod', 'coral')) +
labs(title = '시군구별 연평균 총 사망',
x = '기간', y = '사망자 수(명)', fill = '시나리오') +
theme(plot.title = element_text(hjust = 0.5, size = 20),
axis.title = element_text(size = 15),
legend.title = element_text(size = 15),
legend.text = element_text(size = 10)
)
ggplot(data = rdata, aes(x = period, y = death, fill = ssp)) +
geom_boxplot() +
scale_fill_manual(values = c('dodgerblue', 'goldenrod', 'coral')) +
labs(title = '시군구별 연평균 총 사망',
x = '기간', y = '사망자 수(명)', fill = '시나리오') +
theme(plot.title = element_text(hjust = 0.5, size = 20),
axis.title = element_text(size = 15),
legend.title = element_text(size = 15),
legend.text = element_text(size = 10)
)
ggplot(data = rdata, aes(x = period, y = death, fill = ssp)) +
geom_boxplot() +
scale_fill_manual(values = c('dodgerblue', 'goldenrod', 'coral')) +
labs(title = '시군구별 연평균 총 사망',
x = '기간', y = '사망자 수(명)', fill = '시나리오') +
theme(plot.title = element_text(hjust = 0.5, size = 30),
axis.title = element_text(size = 20),
legend.title = element_text(size = 20),
legend.text = element_text(size = 15)
)
data = fread('C:/Users/Ryan Song/Dropbox/PC/Desktop/건강부문_S5/건강_SSP585_2100.csv')
data = data.table::fread('C:/Users/Ryan Song/Dropbox/PC/Desktop/건강부문_S5/건강_SSP585_2100.csv')
data
sub = subset(data, mcs == 1)
sub
3000 / 12
sum(sub$AD)
length(unique(sub$pop))
pop = rep(NA, 250)
pop = sapply(unique(sub$sgg) function(x) subset(sub, sgg == x)[1])
pop = sapply(unique(sub$sgg) function(x) subset(sub, sgg == x)$pop[1])
unique(sub$sgg)
pop = sapply(unique(sub$sgg), function(x) subset(sub, sgg == x)$pop[1])
pop
sub
dth = sapply(unique(sub$sgg), function(x) subset(sub, sgg == x)$dth[1])
pop_tot = sub(pop)
pop_tot = sum(pop)
pop_tot
sum(sub$AD)
sum(sub$AD)/pop_tot*100000
sapply(1:10000, function(x){
sub = subset(data, mcs == x)
pop = sapply(unique(sub$sgg), function(x) subset(sub, sgg == x)$pop[1])
pop_tot = sum(pop)
AD_10 = sum(sub$AD)/pop_tot*10000
return(AD_10)
})
sapply(1:10, function(x){
sub = subset(data, mcs == x)
pop = sapply(unique(sub$sgg), function(x) subset(sub, sgg == x)$pop[1])
pop_tot = sum(pop)
AD_10 = sum(sub$AD)/pop_tot*10000
return(AD_10)
})
sub = subset(data, mcs == x)
sapply(1:10, function(x){
sub = subset(data, mcs == x)
pop = sapply(unique(sub$sgg), function(y) subset(sub, sgg == y)$pop[1])
pop_tot = sum(pop)
AD_10 = sum(sub$AD)/pop_tot*10000
return(AD_10)
})
x=1
sub = subset(data, mcs == x)
pop = sapply(unique(sub$sgg), function(y) subset(sub, sgg == y)$pop[1])
pop_tot = sum(pop)
sapply(1:10, function(x){
sub = subset(data, mcs == x)
pop = sapply(unique(sub$sgg), function(y) subset(sub, sgg == y)$pop[1])
pop_tot = sum(pop)
AD_10 = sum(sub$AD)/pop_tot*100000
return(AD_10)
})
data
ad10_s5 = sapply(1:10, function(x){
sub = subset(data, mcs == x)
pop = sapply(unique(sub$sgg), function(y) subset(sub, sgg == y)$pop[1])
pop_tot = sum(pop)
AD_10 = sum(sub$AD)/pop_tot*100000
return(AD_10)
})
ad10_s5
data
sub
pop
pop_tot
AD_10
sum(sub$AD)/pop_tot*100000
par(xaxt = 'i', yaxt = 'i')
par(xaxs = 'i', yaxs = 'i')
plot(x=c(0,1), y=c(0,1))
plot(type = 'n', xlim = c(-0.5, 3.5), ylim = c(-0.5, 3.5))
plot(x=1, y=1, type = 'n', xlim = c(-0.5, 3.5), ylim = c(-0.5, 3.5))
plot(x=1, y=1, type = 'n', xlim = c(0, 3.5), ylim = c(0, 3.5))
plot(x=1, y=1, type = 'n', xlim = c(0, 3.5), ylim = c(0, 3.5),
axes = F)
axis(1, 1:4)
axis(1, 0:4)
axis(2, 0:4)
axes = F, xlab = 'j', ylab = 'S(j)'
plot(x=1, y=1, type = 'n', xlim = c(0, 3.5), ylim = c(0, 3.5),
axes = F, xlab = 'j', ylab = 'S(j)')
axis(1, 0:4)
axis(2, 0:4)
windowsFont(TMR = windowsFont('Times New Roman'))
TMR = windowsFont('Times New Roman')
par(xaxs = 'i', yaxs = 'i', family = 'TMR')
plot(x=1, y=1, type = 'n', xlim = c(0, 3.5), ylim = c(0, 3.5),
axes = F, xlab = 'j', ylab = 'S(j)')
windowsFont(TMR = windowsFont('Times New Roman'))
TMR = windowsFont("Times New Roman")
par(xaxs = 'i', yaxs = 'i', family = 'TMR')
plot(x=1, y=1, type = 'n', xlim = c(0, 3.5), ylim = c(0, 3.5),
axes = F, xlab = 'j', ylab = 'S(j)')
windowsFont(TMR = windowsFont('Times New Roman'))
windowsFont(TMR = windowsFont('Times New Roman'))
windowsFont(T = windowsFont('Times New Roman'))
windowsFont('TMR' = windowsFont('Times New Roman'))
windowsFont(TMR = windowsFont('Times New Roman'))
windowsFonts(TMR = windowsFonts('Times New Roman'))
windowsFonts(TMR = windowsFont('Times New Roman'))
par(xaxs = 'i', yaxs = 'i')
plot(x=1, y=1, type = 'n', xlim = c(0, 3.5), ylim = c(0, 3.5),
axes = F, xlab = 'j', ylab = 'S(j)')
plot(x=1, y=1, type = 'n', xlim = c(0, 3.5), ylim = c(0, 3.5),
axes = F, xlab = italic('j'), ylab = 'S(j)', main = 'Survival Function')
plot(x=1, y=1, type = 'n', xlim = c(0, 3.5), ylim = c(0, 3.5),
axes = F, xlab = substitute(paste(italic('j'))), ylab = 'S(j)', main = 'Survival Function')
plot(x=1, y=1, type = 'n', xlim = c(0, 3.5), ylim = c(0, 3.5),
axes = F, xlab = substitute(paste(italic('j'))),
ylab = substitute(paste(italic('S(j)'))))
axis(1, 0:4)
axis(2, 0:4)
plot(x=1, y=1, type = 'n', xlim = c(0, 4), ylim = c(0, 4),
axes = F, xlab = substitute(paste(italic('j'))),
ylab = substitute(paste(italic('S(j)'))))
axis(1, 0:4)
axis(2, 0:4)
plot(x=1, y=1, type = 'n', xlim = c(0, 1), ylim = c(0, 4),
axes = F, xlab = substitute(paste(italic('j'))),
ylab = substitute(paste(italic('S(j)'))))
axis(1, 0:4)
axis(2, 0:1)
par(xaxs = 'i', yaxs = 'i')
plot(x=1, y=1, type = 'n', xlim = c(0, 4), ylim = c(0, 1),
axes = F, xlab = substitute(paste(italic('j'))),
ylab = substitute(paste(italic('S(j)'))))
axis(1, 0:4)
axis(2, 0:1)
lines(c(0,1), c(1,0))
plot(x=1, y=1, type = 'n', xlim = c(0, 4), ylim = c(0, 1),
axes = F, xlab = substitute(paste(italic('j'))),
ylab = substitute(paste(italic('S(j)'))))
axis(1, 0:4)
axis(2, 0:1)
lines(c(0,1), c(1,1))
points(c(1,1,2,2,3,3), c(1,2/3,2/3,1/3,1/3,0))
plot(x=1, y=1, type = 'n', xlim = c(0, 4), ylim = c(0, 1.2),
axes = F, xlab = substitute(paste(italic('j'))),
ylab = substitute(paste(italic('S(j)'))))
axis(1, 0:4)
axis(2, 0:1)
lines(c(0,1), c(1,1))
points(c(1,1,2,2,3,3), c(1,2/3,2/3,1/3,1/3,0))
points(c(1,2,3), c(1,2/3,1/3))
points(c(1,2,3), c(2/3,1/3,0))
plot(x=1, y=1, type = 'n', xlim = c(0, 4), ylim = c(0, 1.2),
axes = F, xlab = substitute(paste(italic('j'))),
ylab = substitute(paste(italic('S(j)'))))
axis(1, 0:4)
axis(2, 0:1)
lines(c(0,1), c(1,1))
points(c(1,2,3), c(1,2/3,1/3))
points(c(1,2,3), c(2/3,1/3,0), pch = 16)
lines(c(1,2), c(2/3,2/3))
lines(c(2,3), c(1/3,1/3))
lines(c(1,1), c(1,1/3), lty = 2)
plot(x=1, y=1, type = 'n', xlim = c(0, 4), ylim = c(0, 1.2),
axes = F, xlab = substitute(paste(italic('j'))),
ylab = substitute(paste(italic('S(j)'))))
axis(1, 0:4)
axis(2, 0:1)
lines(c(0,1), c(1,1))
lines(c(1,2), c(2/3,2/3))
lines(c(2,3), c(1/3,1/3))
lines(c(1,1), c(1,2/3), lty = 2)
lines(c(2,2), c(2/3,1/3), lty = 2)
lines(c(3,3), c(1/3,0), lty = 2)
points(c(1,2,3), c(1,2/3,1/3))
points(c(1,2,3), c(2/3,1/3,0), pch = 16)
?sort
print(summary(data))
mread = function(x) {
data = data.table::fread(x)
data = data.frame(data)
print(summary(data))
return(data)
}
data = mread('C:/Users/Ryan Song/Desktop/TA session_T-test_2023_1/myrawdata/peppers.csv')
rm(data)
save(mread, file = 'mread.R')
rm(mread)
load('mread.R')
list.files()
setwd('C:/Users/Ryan Song/Desktop/TA session_T-test_2023_1/myrawdata')
list.files()
data = mread(list.files[1])
data = mread(list.files[1])
data = mread(list.files[3])
list.files[3]
data = mread(list.files()[3])
data = data.frame()
as.Date(paste(i,1,1),'-')
i=2001
as.Date(paste(i,1,1),'-')
as.Date(paste(i,1,1,sep='-'))
as.Date(paste(i,12,31,sep='-'))-as.Date(paste(i,1,1,sep='-'))
as.Date(paste(i,12,31,sep='-')):as.Date(paste(i,1,1,sep='-'))
as.Date(as.Date(paste(i,12,31,sep='-')):as.Date(paste(i,1,1,sep='-')),origin = '1970-01-01')
as.Date(as.Date(paste(i,1,1,sep='-')):as.Date(paste(i,12,31,sep='-')),origin = '1970-01-01')
data = data.frame()
data = data.frame()
for(i in 2001:2020){
temp = data.frame(date = as.Date(as.Date(paste(i,1,1,sep='-')):as.Date(paste(i,12,31,sep='-')),origin = '1970-01-01'))
temp$pm25 = rnorm(nrow(temp),10,5)
data = rbind(data, temp)
print(i)
}
summary(data)
temp$pm25 = ifelse(temp$pm25 < 0, 0, temp$pm25)
rm(temp)
data = data.frame()
for(i in 2001:2020){
temp = data.frame(date = as.Date(as.Date(paste(i,1,1,sep='-')):as.Date(paste(i,12,31,sep='-')),origin = '1970-01-01'))
temp$pm25 = rnorm(nrow(temp),10,5)
temp$pm25 = ifelse(temp$pm25 < 0, 0, temp$pm25)
data = rbind(data, temp)
rm(temp)
print(i)
}
summary(data)
data = data.frame()
for(i in 2001:2020){
temp = data.frame(date = as.Date(as.Date(paste(i,1,1,sep='-')):as.Date(paste(i,12,31,sep='-')),origin = '1970-01-01'))
temp$pm25 = rnorm(nrow(temp),10,5)
temp$pm25 = ifelse(temp$pm25 < 0, 0, temp$pm25)
fwrite(temp, paste0('pm25_',i,'.csv'))
print(i)
}
data = data.frame()
for(i in 2001:2020){
temp = data.frame(date = as.Date(as.Date(paste(i,1,1,sep='-')):as.Date(paste(i,12,31,sep='-')),origin = '1970-01-01'))
temp$pm25 = rnorm(nrow(temp),10,5)
temp$pm25 = ifelse(temp$pm25 < 0, 0, temp$pm25)
data.table::fwrite(temp, paste0('pm25_',i,'.csv'))
print(i)
}
rm(data)
setwd('C:/Users/Ryan Song/Desktop/for/Data')
getwd()
list.files()
length(list.files())
list.files()[1]
data = data.table::fread(list.files()[1])
data
summary(data)
length(list.files())
length(list.files())
data = data.frame()
for(i in 1:length(list.files())) {
sub = data.table::fread(list.files()[i])
data = rbind(data,sub)
rm(sub)
print(i)
}
summary(data)
readall = function(x) {
setwd(x)
data = data.frame()
for(i in 1:length(list.files())) {
sub = data.table::fread(list.files()[i])
data = rbind(data,sub)
rm(sub)
print(i)
}
return(data)
}
x = getwd()
data2 = readall(x)
summary(data2)
rm(list = ls())
setwd('C:/Users/Ryan Song/Desktop/for/Data') # Set your own working directory!!
getwd()
list.files()
list.files()[1]
data = data.table::fread(list.files()[1])
summary(data)
rm(data)
length(list.files())
data = data.frame()
for(i in 1:length(list.files())) {
sub = data.table::fread(list.files()[i])
data = rbind(data,sub)
rm(sub)
print(i)
}
summary(data)
readall = function(x) {
setwd(x)
data = data.frame()
for(i in 1:length(list.files())) {
sub = data.table::fread(list.files()[i])
data = rbind(data,sub)
rm(sub)
}
return(data)
}
x = getwd()
data2 = readall(x)
summary(data2)
rm(list = ls()); gc()
setwd('C:/Users/Ryan Song/Desktop/for/Data') # Set your own working directory!!
getwd()
list.files()
setwd('C:/Users/Ryan Song/Desktop/for/Data') # Set your own working directory!!
getwd()
list.files()
list.files()[1]
setwd('C:/Users/Ryan Song/Desktop/for/Data') # Set your own working directory!!
getwd()
list.files()
list.files()[1]
data = data.table::fread(list.files()[1])
summary(data)
rm(data)
data = data.frame()
for(i in 1:length(list.files())) {
sub = data.table::fread(list.files()[i])
data = rbind(data,sub)
rm(sub)
print(i)
}
data = data.frame()
for(i in 1:length(list.files())) {
sub = data.table::fread(list.files()[i])
data = rbind(data,sub)
rm(sub)
print(i/length(list.files()*100))
}
data = data.frame()
for(i in 1:length(list.files())) {
sub = data.table::fread(list.files()[i])
data = rbind(data,sub)
rm(sub)
print(i/length(list.files())*100)
}
data = data.frame()
for(i in 1:length(list.files())) {
sub = read.csv(list.files()[i])
data = rbind(data,sub)
rm(sub)
print(i)
}
summary(data)
readall = function(x) {
setwd(x)
data = data.frame()
for(i in 1:length(list.files())) {
sub = read.csv(list.files()[i])
data = rbind(data,sub)
rm(sub)
}
return(data)
}
x = getwd()
data2 = readall(x)
summary(data2)
