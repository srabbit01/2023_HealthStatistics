} else{
cat('x < y') # 조건이 거짓이면 출력
cat('x < y\n') # 조건이 거짓이면 출력
x = 5
y = 10
if(x>y){
cat('x > \n') # 조건 참이면 출력
print(x) # TRUE
} else{
cat('x < y\n') # 조건이 거짓이면 출력
print(y) # FALSE
}
getwd()
install.packages("BSDA")
library(BSDA)
sd1 = 0.020
sd2 = 0.025
n = 10
m1 = c(16.03, 16.01, 16.04, 15.96, 16.05, 15.98, 16.05, 16.02, 16.02, 15.99)
m2 = c(16.02, 16.03, 15.97, 16.04, 15.96, 16.02, 16.01, 16.01, 15.99, 16.00)
# a)
(mean(m1)-mean(m2))/sqrt(sd1**2/n+sd2**2/n)
# a)
Z = (mean(m1)-mean(m2))/sqrt(sd1**2/n+sd2**2/n) # 0.9877296
# Z=0.987의 표준정규분포 100% 확률을 찾으면 0.8365이다.
# 즉, P-value=1-2(1-0.8365)
1-2(1-0.8365)
# Z=0.987의 표준정규분포 100% 확률을 찾으면 0.8365이다.
# 즉, P-value=1-2(1-0.8365)
1-2*(1-0.8365)
# b) power = 1-베타
1.96-0.673
-1.96-0.673
# 베타 = Z정규분포(1.287) - Z정규분포(-2.633)
#      = 0.8810 - 0.0043
0.8810-0.0043
# 따라서, Power = 1-0.8767
1-0.8767
# c) 95% Two-sided CI : 95% 신뢰구간 Z값 = +-1.96
(mean(m1)-mean(m2))-1.96*(sqrt(0.02**2/10+0.025**2/10)) # 최소 : -0.4893612
(mean(m1)-mean(m2))+1.96*(sqrt(0.02**2/10+0.025**2/10)) # 최대 : 23.48936
# b) power = 1-베타
1.96-(0.04/sqrt(0.02**2/10+0.25**2/10)
# b) power = 1-베타
1.96-(0.04/sqrt(0.02**2/10+0.25**2/10))
-1.96-0.673
-1.96+(0.04/sqrt(0.02**2/10+0.25**2/10))
-1.96-(0.04/sqrt(0.02**2/10+0.25**2/10)) # -1.455647
# 베타 = Z정규분포(-2.63) - Z정규분포(-2.46)
#      = 0.0043 - 0.0069
0.0043 - 0.0069 # 0.8767
# b) power = 1-베타
1.96-(0.04/sqrt(0.02**2/10+0.025**2/10)) # -2.633
-1.96-(0.04/sqrt(0.02**2/10+0.025**2/10)) # -2.464353
# 베타 = Z정규분포(-1.99) - Z정규분포(-5.91)
#      = 0.0233 - 0 = 0.0233
# 따라서, Power = 1 - 0.0233 = 0.1233
1-0.0233
0.4898*2
1-0.012874*2
# d) 알파 = 0.05, 베타 = 0.02
n = ((1.96+2.05)**2)*(0.02**2+0.025**2)/(0.04**2)
n
# true difference in means of 10
Z0 = ((162.7-155.4)-10)/sqrt(1/10+1/12)
z0
# true difference in means of 10
z0 = ((162.7-155.4)-10)/sqrt(1/10+1/12)
z0
'''
5-5. The burning rates of two different solid-fuel propellants
used in aircrew escape systems are being studied. It is
known that both propellants have approximately the same
standard deviation of burning rate; that is, 세타1=세타2=3cm/s.
Two random samples of n1=20 and n2=20 specimens are
tested; the sample mean burning rates are Xbar1=18.02cm/s
and Xbar2=24.37cm/s.
(a) Test the hypothesis that both propellants have the same
mean burning rate. Use a fixed-level test with 알파=0.05.
(b) What is the P-value of the test in part (a)?
(c) What is the 베타-error of the test in part (a) if the true difference
in mean burning rate is 2.5 cm/s?
(d) Construct a 95% CI on the difference in means u1-u2.
What is the practical meaning of this interval?
'''
# a)
z0 = (18.01-24.37)/sqrt(3**2/20+3**2/20)
z0
install.packages("installr")
library(installr)
check.for.updates.R() # R의 버전을 확인한다.
check.for.updates.R() # R의 버전을 확인한다.
install.R() # 최신 버전의 R을 설치한다.
version # 현재 사용중인 컴퓨터의 플랫폼과 R의 버전 등이 나온다.
#Exercise 2.4.2, file name=e242.R
age <-c(34,30,35,31,33,33,29,37,36,39)
sort(age)
table(age)
hist (0.6*33+0.4*33
summary(age)
apropos("
quanquan")
#Exercise 2.4.2, file name=e242.R
age <- c(34,30,35,31,33,33,29,37,36,39)
sort(age)
table(age)
hist(age) # 히스토그램 그리기
0.6*33+0.4*33
summary(age)
apropos("quan")
quantile(age,.40)
n< -length(age)
n
r=floor((n+1)*p) ; b=(n+1)*p
p-r
r;b
(1 -b)*sort(age)[r]+b*sort(age)[r+1]
n <-length(age)
n
p <-0.40
r=floor((n+1)*p) ; b=(n+1)*p
p-r
r;b
(1 -b)*sort(age)[r]+b*sort(age)[r+1]
### 20. N(0,1^2)
## 1) P(0<Z<1.43)
pnorm(1.43,0,1)-pnorm(0,0,1)
pnorm(1.43,0,1)-0.5
## 2) P(-2.87<Z<2.64)
pnorm(2.64,0,1)-pnorm(-2.87,0,1)
## 3) P(Z>=0.50)
pnorm(0.50,0,1,lower=F)
## 4) P(Z>=-0.45)
pnorm(-0.45,0,1,lower=F)
## 5) P(Z<-2.35)
pnorm(-2.35,0,1)
## 6) P(Z<2.35)
pnorm(2.35,0,1)
## 7) P(-1.96<=Z<=1.96)
pnorm(1.96,0,1)-pnorm(-1.96,0,1)
## 8) P(-2.58<=Z<=2.58)
pnorm(2.58,0,1)-pnorm(-2.58,0,1)
2*(pnorm(2.58,0,1)-0.5)
## 9) P(-1.65<=Z<=1.65)
pnorm(1.65,0,1)-pnorm(-1.65,0,1)
### 13. n=150, 30% 진드기 알레르기 양성
# 모비율 95% 신뢰구간?
n=150
pos=150*0.3
# 모비율 추정량
ratio=pos/n
ratio
# 표준오차
err=sqrt(ratio*(1-ratio)/n)
# 하한값
ratio-1.96*err # 0.2109284
# 상한값
ratio+1.96*err # 0.4140716
### 18. n=200, 180명 신약 먹은 후 증상 호전
# 모비율의 90% 신뢰구간?
n=200
pos=180
# 모비율 추정량
ratio=pos/n # 0.3
ratio
# 표준오차
err=sqrt(ratio*(1-ratio)/n)
# 하한값
ratio-1.96*err # 0.2266635
# 상한값
ratio+1.96*err # 0.3733365
### 20. n=10
weight = c(20.5,24.8,21.3,22.7,18.2,31.6,25.4,21.9,19.7,22.2)
length(weight)
# 모평균의 95% 신뢰구간?
mw = mean(weight)
# 표준오차
err=sd(weight)/sqrt(length(weight))
# 하한값
ratio-1.645*err # 0.8584221
# 상한값
ratio+1.645*err # 0.9415779
### 18. n=200, 180명 신약 먹은 후 증상 호전
# 모비율의 90% 신뢰구간?
n=200
pos=180
# 모비율 추정량
ratio=pos/n # 0.9
# 표준오차
err=sqrt(ratio*(1-ratio)/n)
# 하한값
ratio-1.645*err # 0.8584221
# 상한값
ratio+1.645*err # 0.9415779
### 20. n=10, 모집단 정규분포 따른 가정
weight = c(20.5,24.8,21.3,22.7,18.2,31.6,25.4,21.9,19.7,22.2)
# 모평균의 95% 신뢰구간?
mw=mean(weight)
# 표준오차
err=sd(weight)/sqrt(length(weight))
# 하한값
mw-1.96*err # 0.2037984
# 상한값
mw+1.96*err # 0.361718
# 하한값
mw-qt(0.975,10-1)*err # 0.2037984
qt(0.975,10-1)
# 하한값
mw-qt(0.975,10-1)*err # 0.2037984
# 상한값
mw+qt(0.975,10-1)*err # 0.361718
b=c(5.0,11.2,11.6,3.5,5.3,3.5,6.2,6.6,7.1,6.4,4.5,5.1,3.2,4.7,4.5,3.0)
### 22.
a=c(4.0,5.2,4.2,5.9,16.8,3.5,3.0,6.4,6.8,3.6,6.9,5.7)
b=c(5.0,11.2,11.6,3.5,5.3,3.5,6.2,6.6,7.1,6.4,4.5,5.1,3.2,4.7,4.5,3.0)
length(a)
length(b)
# 등분산 가정, 두 모평균 차에 대한 95% 신뢰구간?
ma=mean(a) # 7.52
mb=mean(b) # 7.264167
ma
mb
# 모평균 차 추정량
aMb=ma-mb # 0.2558333
aMb
# 표준오차
err=sqrt(var(a)/length(a)+var(b)/length(b))
# 하한값
aMb-1.96*err # 0.09523355
# 상한값
aMb+1.96*err # 0.4164331
### 24.
chick=data("chickwts")
### 24.
weight=data("chickwts")
weight
weight
weight
weight
#
mean(wight)
#
mean(weight)
weight
#
summary(weight)
### 24.
chick=data("chickwts")
### 24.
chick=data(chickwts)
chick
data.frame(chick)
### 24.
chick=data(chickwts)
chickwts
### 24.
cw=chickwts$weight
cf=chickwts$feed
### 24.
chickwts
cw=chickwts$weight
cf=chickwts$feed
# weight 변수의 95% 신뢰구간?
mw=mean(cw)
# 표준오차
err=sd(cw)/sqrt(length(cw))
# 하한값
mw-qt(0.975,10-1)*err # 20.13558
# 상한값
mw+qt(0.975,10-1)*err # 25.52442
# 하한값
mw-qt(0.975,length(cw)-1)*err # 240.3495
# 상한값
mw+qt(0.975,length(cw)-1)*err # 282.2702
### 24.
chickwts
### 25.
which(chickwts,chickwts$feed=="casein",chickwts$weight)
### 25.
ifelse(chickwts,chickwts$feed=="casein",chickwts$weight)
### 25.
ifelse(chickwts$feed=="casein",chickwts$weight)
### 25.
hb=chickwts[chickwts$feed=="horsebeen"] # horsebeen
hb
### 25.
hb=chickwts[chickwts$feed=="horsebeen",] # horsebeen
hb
### 25.
hb=chickwts[,chickwts$feed=="horsebeen"] # horsebeen
hb
chickwts$feed=="horsebeen"
### 25.
hb=chickwts[chickwts$feed=="horsebean"] # horsebeen
### 25.
hb=chickwts[chickwts$feed=="horsebean"] # horsebeen
### 25.
hb=chickwts[chickwts$feed=="horsebean",] # horsebeen
hb
### 25.
hb=chickwts[chickwts$feed=="horsebean",][0] # horsebeen
hb
### 25.
hb=chickwts[chickwts$feed=="horsebean",][1] # horsebeen
hb
### 25.
hb=chickwts[chickwts$feed=="horsebean",] # horsebeen
ls=chickwts[chickwts$feed=="linseed",] # linseed
hbw=hb[1]
lsw=hb[1]
# feed 변수 별 weight
hbw=hb[1]
lsw=hb[1]
# 두 모분산 정규분포 가정
hbm=mean(hbw)
lsm=mean(lsw)
# feed 변수 별 weight
hbw=hb[1]
lsw=hb[1]
hbw
# 두 모분산 정규분포 가정
hbm=mean(hbw)
hbw
# feed 변수 별 weight
hbw=int(hb[1])
# feed 변수 별 weight
hbw=hb$weight
lsw=hb$weight
# 두 모분산 정규분포 가정
hbm=mean(hbw)
lsm=mean(lsw)
hbm
lsm
hbm
lsw=ls$weight
lsm=mean(lsw)
lsm
# 모평균 차 추정량
lMh=lsm-hbm # 0.2875
lMh
# 표준오차
err=sqrt(var(hbw)/length(hbw)+var(lsw)/length(lsw))
# 하한값
lMh-1.96*err # -2.127581
# 상한값
lMh+1.96*err # 2.702581
### 13. n=150, 30% 진드기 알레르기 양성
# 모비율 95% 신뢰구간?
n=150
### 13. n=150, 30% 진드기 알레르기 양성
# 모비율 95% 신뢰구간?
n=150
pos=150*0.3
# 모비율 추정량
ratio=pos/n # 0.3
# 표준오차
err=sqrt(ratio*(1-ratio)/n)
# 하한값
ratio-qt(0.975,length(n)-1)*err # 0.2266635
# 상한값
ratio+qt(0.975,length(n)-1)*err # 0.3733365
### 13. n=150, 30% 진드기 알레르기 양성
# 모비율 95% 신뢰구간?
n=150
pos=150*0.3
# 모비율 추정량
ratio=pos/n # 0.3
# 표준오차
err=sqrt(ratio*(1-ratio)/n)
# 하한값
ratio-qt(0.975,length(n)-1)*err # 0.2266635
qt(0.975,length(n)-1)
length(n)
### 13. n=150, 30% 진드기 알레르기 양성
# 모비율 95% 신뢰구간?
n=150
length(n)-1
150
# 하한값
ratio-qt(0.975,n-1)*err # 0.2266635
# 상한값
ratio+qt(0.975,n-1)*err # 0.3733365
### 13. n=150, 30% 진드기 알레르기 양성
# 모비율 95% 신뢰구간?
n=150
pos=150*0.3
# 모비율 추정량
ratio=pos/n # 0.3
# 표준오차
err=sd(ratio)/sqrt(n)
# 하한값
ratio-qt(0.975,n-1)*err # 0.2260644
# 상한값
ratio+qt(0.975,n-1)*err # 0.3739356
ratio
qt(0.975,n-1)
err
# 모비율 추정량
ratio=pos/n # 0.3
n
sd(ratio)/sqrt(n)
sd(ratio)
### 13. n=150, 30% 진드기 알레르기 양성
# 모비율 95% 신뢰구간?
n=150
pos=150*0.3
# 모비율 추정량
ratio=pos/n # 0.3
# 표준오차
err=sqrt(ratio*(1-ratio)/n)
# 하한값
ratio-qt(0.975,n-1)*err # 0.2266635
# 상한값
ratio+qt(0.975,n-1)*err # 0.3733365
### 14. n=80, 위험등급=25
# 위험등급 모비율 95% 신뢰구간?
n=80
risk=25
# 모비율 추정량
ratio=risk/n # 0.3125
ratio
# 표준오차
err=sqrt(ratio*(1-ratio)/n)
# 하한값
ratio-1.96*err # 0.2266635
# 상한값
ratio+1.96*err # 0.3733365
### 14. n=80, 위험등급=25
# 위험등급 모비율 95% 신뢰구간?
n=80
risk=25
# 모비율 추정량
ratio=risk/n # 0.3125
# 표준오차
err=sqrt(ratio*(1-ratio)/n)
# 하한값
ratio-1.96*err # 0.2109284
# 상한값
ratio+1.96*err # 0.4140716
### 6.4. 두 집단 분산 차의 신뢰구간
## 1) 모분산 동일 = 합동추정량
# s1 = sd(X1)
# s2 = sd(X2)
# sp2 = ((n1-1)*s1**2+(n2-1)*s2**2)/(n1+n2-2)
## 2) 모분산 다름 = t'-분포
# t1 = qt(0.975,length(cw)-1)
qt(0.975,18-1)
sp2=((length(ma)-1)*s1**2+(length(mb)-1)*s2**2)/(length(ma)+length(mb)-2)
### 21. 2개의 독립 표본 추출
a=c(7.04,7.12,7.51,7.88,7.25,7.26,7.85,7.14,7.96,7.57,7.92,7.37,7.66,7.62,7.65)
b=c(7.16,7.05,7.09,7.31,7.14,7.25,7.32,7.47,7.74,7.10,7.35,7.19)
# 등분산 가정, 두 모평균 차에 대한 90% 신뢰구간?
ma=mean(a) # 7.52
mb=mean(b) # 7.264167
# 모평균 차 추정량
aMb=ma-mb # 0.2558333
# 표준오차
err=sqrt(var(a)/length(a)+var(b)/length(b))
## 1) 모분산 동일 = 합동추정량
s1=sd(ma)
s2=sd(mb)
sp2=((length(ma)-1)*s1**2+(length(mb)-1)*s2**2)/(length(ma)+length(mb)-2)
## 2) 모분산 다름 = t'-분포
t1=qt(0.975,length(ma)-1)
length(ma)
### 21. 2개의 독립 표본 추출
a=c(7.04,7.12,7.51,7.88,7.25,7.26,7.85,7.14,7.96,7.57,7.92,7.37,7.66,7.62,7.65)
sp2=((length(a)-1)*s1**2+(length(b)-1)*s2**2)/(length(a)+length(b)-2)
## 2) 모분산 다름 = t'-분포
t1=qt(0.975,length(a)-1)
t2=qt(0.975,length(b)-1)
# 하한값
aMb-1.645*err # 0.09523355
tp=((s1**2/length(a))*t1+(s2**2/length(b))*t2)/((s1**2/length(a))+(s2**2/length(b)))
# 하한값
aMb-qt(0.975,length(a)+length(b)-2)*err # 0.09523355
### 6.10. 두 정규분포 모집단 분산비의 신뢰구간
library(car)
t.test()
#------------- 1-1. Time-series plot (Obesity) -------------#
# Load data
setwd("C:/work/Crystal/GitHub/2023_HealthStatistics/R/data")
obesity <- read.csv("obesity.csv")
head(obesity)
# Plot
windows()
par(mfrow=c(2,1))
plot(obesity$year, obesity$crude,type="l", lwd=2,
xlab="Year", ylab="Crude Obesity", col="red",
main="Gwanakgu obesity prevalence (Crude)")
plot(obesity$year, obesity$adjusted,type="l", lwd=2,
xlab="Year", ylab="Adjusted Obesity", col="blue",
main="Gwanakgu obesity prevalence (Adjusted)")
#------------- 1-2. Map (Hypertension) -------------#
# Load Packages
library(dplyr)
library(sf)
library(ggplot2)
#------------- 1-2. Map (Hypertension) -------------#
# Load Packages
install.packages(dplyr)
#------------- 1-2. Map (Hypertension) -------------#
# Load Packages
install.packages(sf)
#------------- 1-2. Map (Hypertension) -------------#
# Load Packages
install.packages(ggplot2)
#------------- 1-2. Map (Hypertension) -------------#
# Load Packages
install.packages("dplyr")
hypertension <- read.csv("hypertension.csv",
fileEncoding = "CP949", encoding = "UTF-8")
